# -*- coding: utf-8 -*-
"""Machine Learning - Classificação - Pigs or Dogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q_G_9ryOPg20410yKo6leQZH5IN5kC1v

# Pigs or Dogs

Projeto de Machine Learning para verificar se o individuo é um cachorro ou porco com base em **3 caracteristicas**:

* Tem pelo longo
* Tem perna curta
* Faz "Au Au"

Possui uma lista com os objetos para treinamento e uma lista de etiquetas para esses objetos.

O mesmo exibe no console o resultado da acurácia após treinamento e teste com uma segunda lista, com dados aleatórios e uma lista de etiquetas para validar os resultados.
"""

from sklearn.svm import LinearSVC          # Importa a biblioteca do estimador
from sklearn.metrics import accuracy_score # Importa a biblioteca de acurácia

# Features (1 - Yes | 0 - No)
# Pelo longo?
# Perna curta?
# Faz "Au Au"?
pig1 = [0, 1, 0]
pig2 = [0, 1, 1]
pig3 = [1, 1, 0]

dog1 = [0, 1, 1]
dog2 = [1, 0, 1]
dog3 = [1, 1, 1]

# 1 => porco, 0 => cachorro
train_x = [pig1, pig2, pig3, dog1, dog2, dog3] # Features para treinamento
train_y = [1,1,1,0,0,0] # identifica oque cada dado do treinamento é, Labels

estimador = LinearSVC() # Instância do estimador

# Testes

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]

testes_x = [misterio1, misterio2, misterio3] #lista dos testes

testes_y = [0, 1, 1] # classe dos teste para saber se acertou

#__________________________________

estimador.fit(train_x, train_y) # Ensina o estimador com os dados e as classes desses dados

previsoes = estimador.predict(testes_x) # Prediz oque cada item da lista é

taxa_de_acerto = accuracy_score(testes_y, previsoes) #valida a acurácia

print("Taxa de acerto: %.2f" %(taxa_de_acerto * 100) ,"%")